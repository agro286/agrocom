/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Freight,
    FreightFromJSON,
    FreightToJSON,
    FreightDto,
    FreightDtoFromJSON,
    FreightDtoToJSON,
} from '../models';

export interface CreateFreightRequest {
    freightDto: FreightDto;
}

export interface DeleteFreightRequest {
    id: number;
}

export interface GetFreightRequest {
    id: number;
}

export interface UpdateFreightRequest {
    id: number;
    freightDto: FreightDto;
}

/**
 * 
 */
export class FreightControllerImplApi extends runtime.BaseAPI {

    /**
     */
    async createFreightRaw(requestParameters: CreateFreightRequest): Promise<runtime.ApiResponse<Freight>> {
        if (requestParameters.freightDto === null || requestParameters.freightDto === undefined) {
            throw new runtime.RequiredError('freightDto','Required parameter requestParameters.freightDto was null or undefined when calling createFreight.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rest/freight`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FreightDtoToJSON(requestParameters.freightDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FreightFromJSON(jsonValue));
    }

    /**
     */
    async createFreight(requestParameters: CreateFreightRequest): Promise<Freight> {
        const response = await this.createFreightRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteFreightRaw(requestParameters: DeleteFreightRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFreight.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rest/freight/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async deleteFreight(requestParameters: DeleteFreightRequest): Promise<string> {
        const response = await this.deleteFreightRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getAllFreightsRaw(): Promise<runtime.ApiResponse<Array<Freight>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rest/freight`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FreightFromJSON));
    }

    /**
     */
    async getAllFreights(): Promise<Array<Freight>> {
        const response = await this.getAllFreightsRaw();
        return await response.value();
    }

    /**
     */
    async getFreightRaw(requestParameters: GetFreightRequest): Promise<runtime.ApiResponse<Freight>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFreight.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rest/freight/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FreightFromJSON(jsonValue));
    }

    /**
     */
    async getFreight(requestParameters: GetFreightRequest): Promise<Freight> {
        const response = await this.getFreightRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateFreightRaw(requestParameters: UpdateFreightRequest): Promise<runtime.ApiResponse<Freight>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateFreight.');
        }

        if (requestParameters.freightDto === null || requestParameters.freightDto === undefined) {
            throw new runtime.RequiredError('freightDto','Required parameter requestParameters.freightDto was null or undefined when calling updateFreight.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rest/freight/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FreightDtoToJSON(requestParameters.freightDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FreightFromJSON(jsonValue));
    }

    /**
     */
    async updateFreight(requestParameters: UpdateFreightRequest): Promise<Freight> {
        const response = await this.updateFreightRaw(requestParameters);
        return await response.value();
    }

}
