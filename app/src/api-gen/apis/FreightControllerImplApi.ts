/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Freight,
    FreightFromJSON,
    FreightToJSON,
    FreightDto,
    FreightDtoFromJSON,
    FreightDtoToJSON,
} from '../models';

export interface CreateFreightUsingPOSTRequest {
    dto: FreightDto;
}

export interface DeleteFreightUsingDELETERequest {
    id: number;
}

export interface GetFreightUsingGETRequest {
    id: number;
}

export interface UpdateFreightUsingPUTRequest {
    id: number;
    dto: FreightDto;
}

/**
 * 
 */
export class FreightControllerImplApi extends runtime.BaseAPI {

    /**
     * createFreight
     */
    async createFreightUsingPOSTRaw(requestParameters: CreateFreightUsingPOSTRequest): Promise<runtime.ApiResponse<Freight>> {
        if (requestParameters.dto === null || requestParameters.dto === undefined) {
            throw new runtime.RequiredError('dto','Required parameter requestParameters.dto was null or undefined when calling createFreightUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/agrocom/rest/freight`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FreightDtoToJSON(requestParameters.dto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FreightFromJSON(jsonValue));
    }

    /**
     * createFreight
     */
    async createFreightUsingPOST(requestParameters: CreateFreightUsingPOSTRequest): Promise<Freight> {
        const response = await this.createFreightUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * deleteFreight
     */
    async deleteFreightUsingDELETERaw(requestParameters: DeleteFreightUsingDELETERequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFreightUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/agrocom/rest/freight/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * deleteFreight
     */
    async deleteFreightUsingDELETE(requestParameters: DeleteFreightUsingDELETERequest): Promise<string> {
        const response = await this.deleteFreightUsingDELETERaw(requestParameters);
        return await response.value();
    }

    /**
     * getAllFreights
     */
    async getAllFreightsUsingGETRaw(): Promise<runtime.ApiResponse<Array<Freight>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/agrocom/rest/freight`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FreightFromJSON));
    }

    /**
     * getAllFreights
     */
    async getAllFreightsUsingGET(): Promise<Array<Freight>> {
        const response = await this.getAllFreightsUsingGETRaw();
        return await response.value();
    }

    /**
     * getFreight
     */
    async getFreightUsingGETRaw(requestParameters: GetFreightUsingGETRequest): Promise<runtime.ApiResponse<Freight>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFreightUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/agrocom/rest/freight/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FreightFromJSON(jsonValue));
    }

    /**
     * getFreight
     */
    async getFreightUsingGET(requestParameters: GetFreightUsingGETRequest): Promise<Freight> {
        const response = await this.getFreightUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * updateFreight
     */
    async updateFreightUsingPUTRaw(requestParameters: UpdateFreightUsingPUTRequest): Promise<runtime.ApiResponse<Freight>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateFreightUsingPUT.');
        }

        if (requestParameters.dto === null || requestParameters.dto === undefined) {
            throw new runtime.RequiredError('dto','Required parameter requestParameters.dto was null or undefined when calling updateFreightUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/agrocom/rest/freight/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FreightDtoToJSON(requestParameters.dto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FreightFromJSON(jsonValue));
    }

    /**
     * updateFreight
     */
    async updateFreightUsingPUT(requestParameters: UpdateFreightUsingPUTRequest): Promise<Freight> {
        const response = await this.updateFreightUsingPUTRaw(requestParameters);
        return await response.value();
    }

}
